// Defining the dependencies on assets
//= depend_on_asset "customer/main.html"
//= depend_on_asset "customer/create_account.html"
//= depend_on_asset "customer/money_transfer.html"

var app = angular.module("ERBank");
app.config(function($stateProvider, $urlRouterProvider, $locationProvider){
  var state = $stateProvider.state
  state('404', {
    url: '/404',
    onEnter: function($window) {
      $window.location.href = '/404';
    }
  });
  state('view', { 
    url: '/customer',
    templateUrl: '<%= asset_path("customer/main.html") %>',
    controller: 'MainController'
  });
  state('create_account', { 
    url: '/customer/account',
    templateUrl: '<%= asset_path("customer/create_account.html") %>',
    controller: 'CreateAccountController'
  });
  state('money_transfer', { 
    url: '/customer/account/:id/transfer',
    templateUrl: '<%= asset_path("customer/money_transfer.html") %>',
    controller: 'MoneyTransferController'
  });
  state('transaction_history', { 
    url: '/customer/account/:id/log',
    templateUrl: '<%= asset_path("customer/transaction_history.html") %>',
    controller: 'TransactionHistoryController'
  });

  $('head').append($('<base/>').attr("href","/customer"));
  $locationProvider.html5Mode({ enabled: true });
  $urlRouterProvider.otherwise('/404');
});

app.controller('MainController', function($scope, $rootScope, $backend, $state, $q, dialogs) {
  $scope.updateAlert = function() {
    affected_accounts = _.reduce($scope.customer.payment_accounts, function(acc, account) {
       if (account.current_balance <= $scope.penaltyThreshold) {
         return acc + 1;
       }
       return acc;
    }, 0);

    if (affected_accounts > 0) {
      $scope.lowBalanceAlert = "At least one of your accounts is under $"+$scope.penaltyThreshold
    } else {
      $scope.lowBalanceAlert = null;
    }
  }

  $scope.refreshView = function() {
    $q.all({
      customer:  $backend.customers.getCurrentCustomer(),
      threshold: $backend.paymentAccount.getPenaltyThreshold()
    })
    .then(function(data) {
      $scope.customer         = data.customer;
      $scope.penaltyThreshold = data.threshold;
      $scope.updateAlert();
    }, function(reason) {
      alert(reason);
    });
  }

  $scope.delete_account = function(account) {
    var confirmation = dialogs.confirm("Deleting Account", "Are you sure you want to proceed?");
    confirmation.result.then(function(btn) {
      $backend.paymentAccount.delete(account.id).then(function() {
        $scope.refreshView()
      }, function(reason) {
        alert(reason);
      });
    });
  }

  $scope.create_account = function() {
    $state.transitionTo('create_account');
  };

  $scope.transfer_money = function(account) {
    $state.transitionTo('money_transfer', {id: account.id});
  };
  
  $scope.transaction_history = function(account) {
    $state.transitionTo('transaction_history', {id: account.id});
  };
});

app.controller('CreateAccountController' , function($scope, $rootScope, $backend, $state) {
  $scope.cancel = function() {
    $state.transitionTo('view');
  }
  $scope.create_account = function() {
    var name = $scope.account_name;
    $backend.paymentAccount.create('current', name)
    .then(function() {
      $state.transitionTo('view');
    }, function(reason) {
      alert(reason);
    });
  };
});

app.controller('MoneyTransferController' , function($scope, $rootScope, $backend, $state, $stateParams) {
  $scope.fromId = $stateParams.id;
  $scope.accounts = null

  $scope.cancel = function() {
    $state.transitionTo('view');
  }

  $scope.refreshAccounts = function() {
    $backend.paymentAccount.getAccountsForCurrentUser()
    .then(function(accounts) {
      // Deleting the account from which we are transfering
      $scope.accounts = _(accounts).filter(function(a) {
        return a.id != $stateParams.id; 
      }).__wrapped__;
      $scope.currentAccount = _.find(accounts, {id: parseInt($scope.fromId)})
      console.log($scope.currentAccount)
    }, function(reason) {
      alert(reason);
    });
  }

  $scope.transfer = function() {
    $backend.paymentAccount.transferMoney($scope.amount, $stateParams.id, $scope.toId).then(function(data) {
      $state.transitionTo('view');
    });
  }
});

app.controller('TransactionHistoryController', function($scope, $state, $stateParams, $backend) {
  $scope.accId = $stateParams.id;

  $scope.refreshView = function() {
    $backend.paymentAccount.getAccountById($scope.accId)
    .then(function(account) {
      $scope.account = account;
    }, function(reason) { 
      alert(reason);
    });

    $backend.transactions.getTransactionsForPaymentAccountId($scope.accId)
    .then(function(logitems) {
      $scope.logitems = logitems;
    }, function(reason) {
      alert(reason);
    });
  };

  $scope.back = function() {
    $state.transitionTo('view');
  }
});

// vim: ft=javascript
